{
  "metadata": {
    "kernelspec": {
      "language": "python",
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python",
      "version": "3.10.14",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    },
    "kaggle": {
      "accelerator": "none",
      "dataSources": [
        {
          "sourceId": 4977082,
          "sourceType": "datasetVersion",
          "datasetId": 2481051
        }
      ],
      "dockerImageVersionId": 30761,
      "isInternetEnabled": false,
      "language": "python",
      "sourceType": "notebook",
      "isGpuEnabled": false
    },
    "colab": {
      "provenance": []
    }
  },
  "nbformat_minor": 0,
  "nbformat": 4,
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "**оригинальные фрагменты кода**\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "6RwKypUgZwEW"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "path = '/kaggle/input/top_view/annotations'"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2024-08-26T11:56:00.513312Z",
          "iopub.execute_input": "2024-08-26T11:56:00.513795Z",
          "iopub.status.idle": "2024-08-26T11:56:00.553696Z",
          "shell.execute_reply.started": "2024-08-26T11:56:00.513748Z",
          "shell.execute_reply": "2024-08-26T11:56:00.552286Z"
        },
        "trusted": true,
        "id": "fHBlAhiDZunh"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import os\n",
        "import glob"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2024-08-26T12:35:30.943810Z",
          "iopub.execute_input": "2024-08-26T12:35:30.944230Z",
          "iopub.status.idle": "2024-08-26T12:35:30.951827Z",
          "shell.execute_reply.started": "2024-08-26T12:35:30.944192Z",
          "shell.execute_reply": "2024-08-26T12:35:30.950450Z"
        },
        "trusted": true,
        "id": "MojQJh4zZuni"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "import glob\n",
        "print(os.listdir('/kaggle/input/soccertrack/top_view/annotations'))\n",
        "csv_files = glob.glob(os.path.join('/kaggle/input/soccertrack/top_view/annotations', \"*.csv\"))"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2024-08-26T12:35:31.906520Z",
          "iopub.execute_input": "2024-08-26T12:35:31.907614Z",
          "iopub.status.idle": "2024-08-26T12:35:31.924060Z",
          "shell.execute_reply.started": "2024-08-26T12:35:31.907565Z",
          "shell.execute_reply": "2024-08-26T12:35:31.922889Z"
        },
        "trusted": true,
        "id": "RgPn3Ap3Zunk",
        "outputId": "16e1cece-067a-474e-eb22-74b4647a00de"
      },
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "text": "['D_20220220_1_0210_0240.csv', 'D_20220220_1_0600_0630.csv', 'D_20220220_1_1290_1320.csv', 'D_20220220_1_1020_1050.csv', 'D_20220220_1_1590_1620.csv', 'D_20220220_1_1500_1530.csv', 'D_20220220_1_0630_0660.csv', 'D_20220220_1_0480_0510.csv', 'D_20220220_1_0660_0690.csv', 'D_20220220_1_1410_1440.csv', 'D_20220220_1_1050_1080.csv', 'D_20220220_1_0300_0330.csv', 'D_20220220_1_0540_0570.csv', 'D_20220220_1_1200_1230.csv', 'D_20220220_1_1740_1770.csv', 'D_20220220_1_0150_0180.csv', 'D_20220220_1_0720_0750.csv', 'D_20220220_1_1440_1470.csv', 'D_20220220_1_1650_1680.csv', 'D_20220220_1_1350_1380.csv', 'D_20220220_1_1620_1650.csv', 'D_20220220_1_0120_0150.csv', 'D_20220220_1_1530_1560.csv', 'D_20220220_1_0360_0390.csv', 'D_20220220_1_1260_1290.csv', 'D_20220220_1_0330_0360.csv', 'D_20220220_1_0930_0960.csv', 'D_20220220_1_0990_1020.csv', 'D_20220220_1_0240_0270.csv', 'D_20220220_1_1470_1500.csv', 'D_20220220_1_1140_1170.csv', 'D_20220220_1_1230_1260.csv', 'D_20220220_1_1080_1110.csv', 'D_20220220_1_1770_1800.csv', 'D_20220220_1_0900_0930.csv', 'D_20220220_1_0090_0120.csv', 'D_20220220_1_0690_0720.csv', 'D_20220220_1_1680_1710.csv', 'D_20220220_1_0870_0900.csv', 'D_20220220_1_0780_0810.csv', 'D_20220220_1_0510_0540.csv', 'D_20220220_1_0000_0030.csv', 'D_20220220_1_0180_0210.csv', 'D_20220220_1_0840_0870.csv', 'D_20220220_1_1320_1350.csv', 'D_20220220_1_1110_1140.csv', 'D_20220220_1_1560_1590.csv', 'D_20220220_1_0960_0990.csv', 'D_20220220_1_0030_0060.csv', 'D_20220220_1_0750_0780.csv', 'D_20220220_1_0270_0300.csv', 'D_20220220_1_1170_1200.csv', 'D_20220220_1_1710_1740.csv', 'D_20220220_1_0060_0090.csv', 'D_20220220_1_0810_0840.csv', 'D_20220220_1_0420_0450.csv', 'D_20220220_1_0390_0420.csv', 'D_20220220_1_0570_0600.csv', 'D_20220220_1_0450_0480.csv', 'D_20220220_1_1380_1410.csv']\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "csv_files.sort()\n",
        "print(csv_files)\n",
        "data = pd.read_csv(csv_files[0], header=None)\n",
        "\n",
        "# Dropping the original first few rows, and the first column\n",
        "data = data.drop([0, 1, 2, 3])\n",
        "\n",
        "# Concatenating all the annotation files\n",
        "for file in csv_files[1:]:\n",
        "\n",
        "    # Preprocessing temp files\n",
        "    temp = pd.read_csv(file, header=None)\n",
        "    temp = temp.drop([0, 1, 2, 3])\n",
        "    temp = temp.iloc[:,1:]\n",
        "\n",
        "    # Concatenating with the previous file\n",
        "    data = pd.concat([data, temp])\n",
        "\n",
        "    # Print the filename\n",
        "    print('Concatenating file:', file.split(\"\\\\\")[-1])\n",
        "\n",
        "# Reset the indices and remove the wrong one\n",
        "data = data.reset_index()\n",
        "data = data.iloc[:,2:]\n",
        "\n",
        "# Converting data type into floats\n",
        "data = data.astype(float)"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2024-08-26T12:35:38.153405Z",
          "iopub.execute_input": "2024-08-26T12:35:38.153808Z",
          "iopub.status.idle": "2024-08-26T12:35:43.498131Z",
          "shell.execute_reply.started": "2024-08-26T12:35:38.153768Z",
          "shell.execute_reply": "2024-08-26T12:35:43.496507Z"
        },
        "trusted": true,
        "id": "5fJ-cjKfZunk",
        "outputId": "34edc668-7018-42ae-f44c-1d77aefca308"
      },
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "text": "['/kaggle/input/soccertrack/top_view/annotations/D_20220220_1_0000_0030.csv', '/kaggle/input/soccertrack/top_view/annotations/D_20220220_1_0030_0060.csv', '/kaggle/input/soccertrack/top_view/annotations/D_20220220_1_0060_0090.csv', '/kaggle/input/soccertrack/top_view/annotations/D_20220220_1_0090_0120.csv', '/kaggle/input/soccertrack/top_view/annotations/D_20220220_1_0120_0150.csv', '/kaggle/input/soccertrack/top_view/annotations/D_20220220_1_0150_0180.csv', '/kaggle/input/soccertrack/top_view/annotations/D_20220220_1_0180_0210.csv', '/kaggle/input/soccertrack/top_view/annotations/D_20220220_1_0210_0240.csv', '/kaggle/input/soccertrack/top_view/annotations/D_20220220_1_0240_0270.csv', '/kaggle/input/soccertrack/top_view/annotations/D_20220220_1_0270_0300.csv', '/kaggle/input/soccertrack/top_view/annotations/D_20220220_1_0300_0330.csv', '/kaggle/input/soccertrack/top_view/annotations/D_20220220_1_0330_0360.csv', '/kaggle/input/soccertrack/top_view/annotations/D_20220220_1_0360_0390.csv', '/kaggle/input/soccertrack/top_view/annotations/D_20220220_1_0390_0420.csv', '/kaggle/input/soccertrack/top_view/annotations/D_20220220_1_0420_0450.csv', '/kaggle/input/soccertrack/top_view/annotations/D_20220220_1_0450_0480.csv', '/kaggle/input/soccertrack/top_view/annotations/D_20220220_1_0480_0510.csv', '/kaggle/input/soccertrack/top_view/annotations/D_20220220_1_0510_0540.csv', '/kaggle/input/soccertrack/top_view/annotations/D_20220220_1_0540_0570.csv', '/kaggle/input/soccertrack/top_view/annotations/D_20220220_1_0570_0600.csv', '/kaggle/input/soccertrack/top_view/annotations/D_20220220_1_0600_0630.csv', '/kaggle/input/soccertrack/top_view/annotations/D_20220220_1_0630_0660.csv', '/kaggle/input/soccertrack/top_view/annotations/D_20220220_1_0660_0690.csv', '/kaggle/input/soccertrack/top_view/annotations/D_20220220_1_0690_0720.csv', '/kaggle/input/soccertrack/top_view/annotations/D_20220220_1_0720_0750.csv', '/kaggle/input/soccertrack/top_view/annotations/D_20220220_1_0750_0780.csv', '/kaggle/input/soccertrack/top_view/annotations/D_20220220_1_0780_0810.csv', '/kaggle/input/soccertrack/top_view/annotations/D_20220220_1_0810_0840.csv', '/kaggle/input/soccertrack/top_view/annotations/D_20220220_1_0840_0870.csv', '/kaggle/input/soccertrack/top_view/annotations/D_20220220_1_0870_0900.csv', '/kaggle/input/soccertrack/top_view/annotations/D_20220220_1_0900_0930.csv', '/kaggle/input/soccertrack/top_view/annotations/D_20220220_1_0930_0960.csv', '/kaggle/input/soccertrack/top_view/annotations/D_20220220_1_0960_0990.csv', '/kaggle/input/soccertrack/top_view/annotations/D_20220220_1_0990_1020.csv', '/kaggle/input/soccertrack/top_view/annotations/D_20220220_1_1020_1050.csv', '/kaggle/input/soccertrack/top_view/annotations/D_20220220_1_1050_1080.csv', '/kaggle/input/soccertrack/top_view/annotations/D_20220220_1_1080_1110.csv', '/kaggle/input/soccertrack/top_view/annotations/D_20220220_1_1110_1140.csv', '/kaggle/input/soccertrack/top_view/annotations/D_20220220_1_1140_1170.csv', '/kaggle/input/soccertrack/top_view/annotations/D_20220220_1_1170_1200.csv', '/kaggle/input/soccertrack/top_view/annotations/D_20220220_1_1200_1230.csv', '/kaggle/input/soccertrack/top_view/annotations/D_20220220_1_1230_1260.csv', '/kaggle/input/soccertrack/top_view/annotations/D_20220220_1_1260_1290.csv', '/kaggle/input/soccertrack/top_view/annotations/D_20220220_1_1290_1320.csv', '/kaggle/input/soccertrack/top_view/annotations/D_20220220_1_1320_1350.csv', '/kaggle/input/soccertrack/top_view/annotations/D_20220220_1_1350_1380.csv', '/kaggle/input/soccertrack/top_view/annotations/D_20220220_1_1380_1410.csv', '/kaggle/input/soccertrack/top_view/annotations/D_20220220_1_1410_1440.csv', '/kaggle/input/soccertrack/top_view/annotations/D_20220220_1_1440_1470.csv', '/kaggle/input/soccertrack/top_view/annotations/D_20220220_1_1470_1500.csv', '/kaggle/input/soccertrack/top_view/annotations/D_20220220_1_1500_1530.csv', '/kaggle/input/soccertrack/top_view/annotations/D_20220220_1_1530_1560.csv', '/kaggle/input/soccertrack/top_view/annotations/D_20220220_1_1560_1590.csv', '/kaggle/input/soccertrack/top_view/annotations/D_20220220_1_1590_1620.csv', '/kaggle/input/soccertrack/top_view/annotations/D_20220220_1_1620_1650.csv', '/kaggle/input/soccertrack/top_view/annotations/D_20220220_1_1650_1680.csv', '/kaggle/input/soccertrack/top_view/annotations/D_20220220_1_1680_1710.csv', '/kaggle/input/soccertrack/top_view/annotations/D_20220220_1_1710_1740.csv', '/kaggle/input/soccertrack/top_view/annotations/D_20220220_1_1740_1770.csv', '/kaggle/input/soccertrack/top_view/annotations/D_20220220_1_1770_1800.csv']\nConcatenating file: /kaggle/input/soccertrack/top_view/annotations/D_20220220_1_0030_0060.csv\nConcatenating file: /kaggle/input/soccertrack/top_view/annotations/D_20220220_1_0060_0090.csv\nConcatenating file: /kaggle/input/soccertrack/top_view/annotations/D_20220220_1_0090_0120.csv\nConcatenating file: /kaggle/input/soccertrack/top_view/annotations/D_20220220_1_0120_0150.csv\nConcatenating file: /kaggle/input/soccertrack/top_view/annotations/D_20220220_1_0150_0180.csv\nConcatenating file: /kaggle/input/soccertrack/top_view/annotations/D_20220220_1_0180_0210.csv\nConcatenating file: /kaggle/input/soccertrack/top_view/annotations/D_20220220_1_0210_0240.csv\nConcatenating file: /kaggle/input/soccertrack/top_view/annotations/D_20220220_1_0240_0270.csv\nConcatenating file: /kaggle/input/soccertrack/top_view/annotations/D_20220220_1_0270_0300.csv\nConcatenating file: /kaggle/input/soccertrack/top_view/annotations/D_20220220_1_0300_0330.csv\nConcatenating file: /kaggle/input/soccertrack/top_view/annotations/D_20220220_1_0330_0360.csv\nConcatenating file: /kaggle/input/soccertrack/top_view/annotations/D_20220220_1_0360_0390.csv\nConcatenating file: /kaggle/input/soccertrack/top_view/annotations/D_20220220_1_0390_0420.csv\nConcatenating file: /kaggle/input/soccertrack/top_view/annotations/D_20220220_1_0420_0450.csv\nConcatenating file: /kaggle/input/soccertrack/top_view/annotations/D_20220220_1_0450_0480.csv\nConcatenating file: /kaggle/input/soccertrack/top_view/annotations/D_20220220_1_0480_0510.csv\nConcatenating file: /kaggle/input/soccertrack/top_view/annotations/D_20220220_1_0510_0540.csv\nConcatenating file: /kaggle/input/soccertrack/top_view/annotations/D_20220220_1_0540_0570.csv\nConcatenating file: /kaggle/input/soccertrack/top_view/annotations/D_20220220_1_0570_0600.csv\nConcatenating file: /kaggle/input/soccertrack/top_view/annotations/D_20220220_1_0600_0630.csv\nConcatenating file: /kaggle/input/soccertrack/top_view/annotations/D_20220220_1_0630_0660.csv\nConcatenating file: /kaggle/input/soccertrack/top_view/annotations/D_20220220_1_0660_0690.csv\nConcatenating file: /kaggle/input/soccertrack/top_view/annotations/D_20220220_1_0690_0720.csv\nConcatenating file: /kaggle/input/soccertrack/top_view/annotations/D_20220220_1_0720_0750.csv\nConcatenating file: /kaggle/input/soccertrack/top_view/annotations/D_20220220_1_0750_0780.csv\nConcatenating file: /kaggle/input/soccertrack/top_view/annotations/D_20220220_1_0780_0810.csv\nConcatenating file: /kaggle/input/soccertrack/top_view/annotations/D_20220220_1_0810_0840.csv\nConcatenating file: /kaggle/input/soccertrack/top_view/annotations/D_20220220_1_0840_0870.csv\nConcatenating file: /kaggle/input/soccertrack/top_view/annotations/D_20220220_1_0870_0900.csv\nConcatenating file: /kaggle/input/soccertrack/top_view/annotations/D_20220220_1_0900_0930.csv\nConcatenating file: /kaggle/input/soccertrack/top_view/annotations/D_20220220_1_0930_0960.csv\nConcatenating file: /kaggle/input/soccertrack/top_view/annotations/D_20220220_1_0960_0990.csv\nConcatenating file: /kaggle/input/soccertrack/top_view/annotations/D_20220220_1_0990_1020.csv\nConcatenating file: /kaggle/input/soccertrack/top_view/annotations/D_20220220_1_1020_1050.csv\nConcatenating file: /kaggle/input/soccertrack/top_view/annotations/D_20220220_1_1050_1080.csv\nConcatenating file: /kaggle/input/soccertrack/top_view/annotations/D_20220220_1_1080_1110.csv\nConcatenating file: /kaggle/input/soccertrack/top_view/annotations/D_20220220_1_1110_1140.csv\nConcatenating file: /kaggle/input/soccertrack/top_view/annotations/D_20220220_1_1140_1170.csv\nConcatenating file: /kaggle/input/soccertrack/top_view/annotations/D_20220220_1_1170_1200.csv\nConcatenating file: /kaggle/input/soccertrack/top_view/annotations/D_20220220_1_1200_1230.csv\nConcatenating file: /kaggle/input/soccertrack/top_view/annotations/D_20220220_1_1230_1260.csv\nConcatenating file: /kaggle/input/soccertrack/top_view/annotations/D_20220220_1_1260_1290.csv\nConcatenating file: /kaggle/input/soccertrack/top_view/annotations/D_20220220_1_1290_1320.csv\nConcatenating file: /kaggle/input/soccertrack/top_view/annotations/D_20220220_1_1320_1350.csv\nConcatenating file: /kaggle/input/soccertrack/top_view/annotations/D_20220220_1_1350_1380.csv\nConcatenating file: /kaggle/input/soccertrack/top_view/annotations/D_20220220_1_1380_1410.csv\nConcatenating file: /kaggle/input/soccertrack/top_view/annotations/D_20220220_1_1410_1440.csv\nConcatenating file: /kaggle/input/soccertrack/top_view/annotations/D_20220220_1_1440_1470.csv\nConcatenating file: /kaggle/input/soccertrack/top_view/annotations/D_20220220_1_1470_1500.csv\nConcatenating file: /kaggle/input/soccertrack/top_view/annotations/D_20220220_1_1500_1530.csv\nConcatenating file: /kaggle/input/soccertrack/top_view/annotations/D_20220220_1_1530_1560.csv\nConcatenating file: /kaggle/input/soccertrack/top_view/annotations/D_20220220_1_1560_1590.csv\nConcatenating file: /kaggle/input/soccertrack/top_view/annotations/D_20220220_1_1590_1620.csv\nConcatenating file: /kaggle/input/soccertrack/top_view/annotations/D_20220220_1_1620_1650.csv\nConcatenating file: /kaggle/input/soccertrack/top_view/annotations/D_20220220_1_1650_1680.csv\nConcatenating file: /kaggle/input/soccertrack/top_view/annotations/D_20220220_1_1680_1710.csv\nConcatenating file: /kaggle/input/soccertrack/top_view/annotations/D_20220220_1_1710_1740.csv\nConcatenating file: /kaggle/input/soccertrack/top_view/annotations/D_20220220_1_1740_1770.csv\nConcatenating file: /kaggle/input/soccertrack/top_view/annotations/D_20220220_1_1770_1800.csv\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "num_columns = len(data.columns)\n",
        "group_size = 4\n",
        "num_players = num_columns // group_size\n",
        "\n",
        "for i in range(num_players):\n",
        "    group_columns = data.iloc[:, i*group_size:(i+1)*group_size]\n",
        "    result_column_name = f'player_{i}_x'\n",
        "    data[result_column_name] = group_columns.iloc[:,1] + group_columns.iloc[:,3] / 2\n",
        "    result_column_name = f'player_{i}_y'\n",
        "    data[result_column_name] = group_columns.iloc[:,2] + group_columns.iloc[:,0] / 2\n",
        "\n",
        "# Correcting the final coordinates as the ball coordinates\n",
        "data = data.rename({'player_22_x':'ball_x', 'player_22_y':'ball_y'}, axis = 1)\n",
        "\n",
        "# Remove the redundant bbox coordinates\n",
        "data = data.iloc[:,-46:]\n",
        "\n",
        "data.head()"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2024-08-26T12:36:06.790916Z",
          "iopub.execute_input": "2024-08-26T12:36:06.792284Z",
          "iopub.status.idle": "2024-08-26T12:36:07.020415Z",
          "shell.execute_reply.started": "2024-08-26T12:36:06.792215Z",
          "shell.execute_reply": "2024-08-26T12:36:07.018943Z"
        },
        "trusted": true,
        "id": "l0WiPGJHZunl",
        "outputId": "79b0c5c2-b377-4bdc-e99d-fa9e6461cbb0"
      },
      "execution_count": null,
      "outputs": [
        {
          "execution_count": 12,
          "output_type": "execute_result",
          "data": {
            "text/plain": "   player_0_x  player_0_y  player_1_x   player_1_y  player_2_x  player_2_y  \\\n0      820.50     1070.50      1483.5  1099.500000     1939.50      1079.5   \n1      821.25     1071.75      1483.5  1099.192308     1936.75      1080.5   \n2      822.00     1073.00      1483.5  1098.884615     1934.00      1081.5   \n3      822.75     1074.25      1483.5  1098.576923     1931.25      1082.5   \n4      823.50     1075.50      1483.5  1098.269231     1928.50      1083.5   \n\n   player_3_x  player_3_y  player_4_x  player_4_y  ...  player_18_x  \\\n0      1907.5      532.50      1586.5      1404.5  ...       2331.5   \n1      1909.5      532.25      1588.0      1404.5  ...       2331.5   \n2      1911.5      532.00      1589.5      1404.5  ...       2331.5   \n3      1913.5      531.75      1591.0      1404.5  ...       2331.5   \n4      1915.5      531.50      1592.5      1404.5  ...       2331.5   \n\n   player_18_y  player_19_x  player_19_y  player_20_x  player_20_y  \\\n0        531.5     1931.500     1335.500       2271.5  1383.500000   \n1        531.1     1931.375     1335.125       2271.5  1383.475610   \n2        530.7     1931.250     1334.750       2271.5  1383.451220   \n3        530.3     1931.125     1334.375       2271.5  1383.426829   \n4        529.9     1931.000     1334.000       2271.5  1383.402439   \n\n   player_21_x  player_21_y    ball_x    ball_y  \n0  2556.500000  1165.500000  1921.000  1078.000  \n1  2556.357143  1165.214286  1915.625  1078.625  \n2  2556.214286  1164.928571  1910.250  1079.250  \n3  2556.071429  1164.642857  1904.875  1079.875  \n4  2555.928571  1164.357143  1899.500  1080.500  \n\n[5 rows x 46 columns]",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>player_0_x</th>\n      <th>player_0_y</th>\n      <th>player_1_x</th>\n      <th>player_1_y</th>\n      <th>player_2_x</th>\n      <th>player_2_y</th>\n      <th>player_3_x</th>\n      <th>player_3_y</th>\n      <th>player_4_x</th>\n      <th>player_4_y</th>\n      <th>...</th>\n      <th>player_18_x</th>\n      <th>player_18_y</th>\n      <th>player_19_x</th>\n      <th>player_19_y</th>\n      <th>player_20_x</th>\n      <th>player_20_y</th>\n      <th>player_21_x</th>\n      <th>player_21_y</th>\n      <th>ball_x</th>\n      <th>ball_y</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>820.50</td>\n      <td>1070.50</td>\n      <td>1483.5</td>\n      <td>1099.500000</td>\n      <td>1939.50</td>\n      <td>1079.5</td>\n      <td>1907.5</td>\n      <td>532.50</td>\n      <td>1586.5</td>\n      <td>1404.5</td>\n      <td>...</td>\n      <td>2331.5</td>\n      <td>531.5</td>\n      <td>1931.500</td>\n      <td>1335.500</td>\n      <td>2271.5</td>\n      <td>1383.500000</td>\n      <td>2556.500000</td>\n      <td>1165.500000</td>\n      <td>1921.000</td>\n      <td>1078.000</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>821.25</td>\n      <td>1071.75</td>\n      <td>1483.5</td>\n      <td>1099.192308</td>\n      <td>1936.75</td>\n      <td>1080.5</td>\n      <td>1909.5</td>\n      <td>532.25</td>\n      <td>1588.0</td>\n      <td>1404.5</td>\n      <td>...</td>\n      <td>2331.5</td>\n      <td>531.1</td>\n      <td>1931.375</td>\n      <td>1335.125</td>\n      <td>2271.5</td>\n      <td>1383.475610</td>\n      <td>2556.357143</td>\n      <td>1165.214286</td>\n      <td>1915.625</td>\n      <td>1078.625</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>822.00</td>\n      <td>1073.00</td>\n      <td>1483.5</td>\n      <td>1098.884615</td>\n      <td>1934.00</td>\n      <td>1081.5</td>\n      <td>1911.5</td>\n      <td>532.00</td>\n      <td>1589.5</td>\n      <td>1404.5</td>\n      <td>...</td>\n      <td>2331.5</td>\n      <td>530.7</td>\n      <td>1931.250</td>\n      <td>1334.750</td>\n      <td>2271.5</td>\n      <td>1383.451220</td>\n      <td>2556.214286</td>\n      <td>1164.928571</td>\n      <td>1910.250</td>\n      <td>1079.250</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>822.75</td>\n      <td>1074.25</td>\n      <td>1483.5</td>\n      <td>1098.576923</td>\n      <td>1931.25</td>\n      <td>1082.5</td>\n      <td>1913.5</td>\n      <td>531.75</td>\n      <td>1591.0</td>\n      <td>1404.5</td>\n      <td>...</td>\n      <td>2331.5</td>\n      <td>530.3</td>\n      <td>1931.125</td>\n      <td>1334.375</td>\n      <td>2271.5</td>\n      <td>1383.426829</td>\n      <td>2556.071429</td>\n      <td>1164.642857</td>\n      <td>1904.875</td>\n      <td>1079.875</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>823.50</td>\n      <td>1075.50</td>\n      <td>1483.5</td>\n      <td>1098.269231</td>\n      <td>1928.50</td>\n      <td>1083.5</td>\n      <td>1915.5</td>\n      <td>531.50</td>\n      <td>1592.5</td>\n      <td>1404.5</td>\n      <td>...</td>\n      <td>2331.5</td>\n      <td>529.9</td>\n      <td>1931.000</td>\n      <td>1334.000</td>\n      <td>2271.5</td>\n      <td>1383.402439</td>\n      <td>2555.928571</td>\n      <td>1164.357143</td>\n      <td>1899.500</td>\n      <td>1080.500</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 46 columns</p>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data.isnull().sum()\n",
        "data = data.interpolate(method='index')"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2024-08-26T12:36:21.328283Z",
          "iopub.execute_input": "2024-08-26T12:36:21.330124Z",
          "iopub.status.idle": "2024-08-26T12:36:21.368449Z",
          "shell.execute_reply.started": "2024-08-26T12:36:21.330039Z",
          "shell.execute_reply": "2024-08-26T12:36:21.367004Z"
        },
        "trusted": true,
        "id": "-KR1PrprZunl"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df=data"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2024-08-26T12:37:08.101393Z",
          "iopub.execute_input": "2024-08-26T12:37:08.101819Z",
          "iopub.status.idle": "2024-08-26T12:37:08.108586Z",
          "shell.execute_reply.started": "2024-08-26T12:37:08.101782Z",
          "shell.execute_reply": "2024-08-26T12:37:08.106554Z"
        },
        "trusted": true,
        "id": "Z2RQt_6ZZunl"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# МОЙ КОД. ЗАДАНИЕ №1¶"
      ],
      "metadata": {
        "id": "FuRZ9TLjZunl"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "pressures = []\n",
        "\n",
        "def calculate_pressure(df, frame_number):\n",
        "\n",
        "    #df_frame=df.iloc[frame_number]\n",
        "\n",
        "\n",
        "    #if len(df_frame)!=46:\n",
        "     #   print(f\"warning: unexpected data size in frame {frame_number}. skipping this frame  \")\n",
        "    #return pressures\n",
        "\n",
        "\n",
        "\n",
        "    df_frame=df.iloc[frame_number, :46]\n",
        "    reshaped_df=pd.DataFrame(df_frame.values.reshape(-1, 2), columns=['x','y'])\n",
        "\n",
        "\n",
        "    for i in range(len(reshaped_df)):\n",
        "        player_position=reshaped_df.iloc[i].values\n",
        "        pressure=0\n",
        "\n",
        "\n",
        "        if i < 11:\n",
        "            opponents=reshaped_df.iloc[11:22].values\n",
        "        else:\n",
        "            opponents=reshaped_df.iloc[:11].values\n",
        "\n",
        "\n",
        "        for opponent in opponents:\n",
        "            distance=np.linalg.norm(player_position-opponent)\n",
        "            if distance>0:\n",
        "                pressure+=1/distance\n",
        "\n",
        "        pressures.append(pressure)\n",
        "\n",
        "    return pressures\n",
        "\n",
        "# номер кадра\n",
        "frame_number=2000\n",
        "pressures=calculate_pressure(df, frame_number)\n",
        "\n",
        "\n",
        "if pressures:\n",
        "    #pressure distribution for a specific frame\n",
        "    plt.figure(figsize=(10, 6))\n",
        "    plt.bar(range(len(pressures)), pressures)\n",
        "    plt.xlabel('Player Index')\n",
        "    plt.ylabel('Pressure')\n",
        "    plt.title(f'Pressure on Players at Frame {frame_number}')\n",
        "    plt.show()\n",
        "\n",
        "    #histogram of pressure values\n",
        "    plt.figure(figsize=(10, 6))\n",
        "    plt.hist(pressures, bins=10, alpha=0.7, color='blue', edgecolor='black')\n",
        "    plt.xlabel('Pressure')\n",
        "    plt.ylabel('Frequency')\n",
        "    plt.title('Histogram of Player Pressure')\n",
        "    plt.show()\n",
        "else:\n",
        "    print(\"No valid pressures to plot.\")"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2024-08-26T12:37:35.051839Z",
          "iopub.execute_input": "2024-08-26T12:37:35.052542Z",
          "iopub.status.idle": "2024-08-26T12:37:35.655646Z",
          "shell.execute_reply.started": "2024-08-26T12:37:35.052501Z",
          "shell.execute_reply": "2024-08-26T12:37:35.654344Z"
        },
        "trusted": true,
        "id": "uepxYbzMZunm",
        "outputId": "8f915f48-bb2e-4aec-af3b-904360750f74"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 1000x600 with 1 Axes>",
            "image/png": ""
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 1000x600 with 1 Axes>",
            "image/png": ""
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "def calculate_pressure_for_all_frames(df):\n",
        "    pressures_over_time=[]\n",
        "\n",
        "    for frame_number in range(2000): #df.index:\n",
        "        df_frame=df.iloc[frame_number,:46]\n",
        "        reshaped_df=pd.DataFrame(df_frame.values.reshape(-1, 2), columns=['x','y'])\n",
        "\n",
        "        pressures=[]\n",
        "        for i in range(len(reshaped_df)):\n",
        "            player_position = reshaped_df.iloc[i].values\n",
        "            pressure=0\n",
        "\n",
        "            if i<11:\n",
        "                opponents=reshaped_df.iloc[11:22].values\n",
        "            else:\n",
        "                opponents=reshaped_df.iloc[:11].values\n",
        "\n",
        "            for opponent in opponents:\n",
        "                distance=np.linalg.norm(player_position-opponent)\n",
        "                if distance>0:\n",
        "                    pressure += 1/distance\n",
        "\n",
        "            pressures.append(pressure)\n",
        "\n",
        "        pressures_over_time.append(pressures)\n",
        "\n",
        "    return pressures_over_time\n",
        "\n",
        "def plot_pressure_over_time(pressures_over_time):\n",
        "    time=range(len(pressures_over_time))\n",
        "    average_pressures=[np.mean(frame_pressure) for frame_pressure in pressures_over_time]\n",
        "\n",
        "    plt.figure(figsize=(14, 7))\n",
        "    plt.plot(time,average_pressures, label='Average Pressure', color='blue')\n",
        "    plt.xlabel('Frame Number')\n",
        "    plt.ylabel('Average Pressure')\n",
        "    plt.title('Pressure Over Time')\n",
        "    plt.legend()\n",
        "    plt.grid(True)\n",
        "    plt.show()\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "pressures_over_time = calculate_pressure_for_all_frames(df)\n",
        "plot_pressure_over_time(pressures_over_time)"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2024-08-26T12:37:56.046666Z",
          "iopub.execute_input": "2024-08-26T12:37:56.048096Z",
          "iopub.status.idle": "2024-08-26T12:38:02.999877Z",
          "shell.execute_reply.started": "2024-08-26T12:37:56.048036Z",
          "shell.execute_reply": "2024-08-26T12:38:02.998575Z"
        },
        "trusted": true,
        "id": "XHyjS7cPZunm",
        "outputId": "87ff7edd-570a-4df9-8fae-a3059ca0e68f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 1400x700 with 1 Axes>",
            "image/png": ""
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# ЗАДАНИЕ №2"
      ],
      "metadata": {
        "id": "kLc6eJSpZunn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#run this\n",
        "def calculate_pressure(df):\n",
        "    pressures = []\n",
        "\n",
        "    for frame_number in range(len(df)):\n",
        "        df_frame=df.iloc[frame_number, :46]\n",
        "        reshaped_df=pd.DataFrame(df_frame.values.reshape(-1, 2), columns=['x', 'y'])\n",
        "\n",
        "        pressures_frame=[]\n",
        "        for i in range(len(reshaped_df)):\n",
        "            player_position=reshaped_df.iloc[i].values\n",
        "            pressure=0\n",
        "\n",
        "            if i < 11:\n",
        "                opponents=reshaped_df.iloc[11:22].values\n",
        "            else:\n",
        "                opponents=reshaped_df.iloc[:11].values\n",
        "\n",
        "\n",
        "            for opponent in opponents:\n",
        "                distance=np.linalg.norm(player_position-opponent)\n",
        "                if distance>0:\n",
        "                    pressure += 1/distance\n",
        "\n",
        "            pressures_frame.append(pressure)\n",
        "\n",
        "        pressures.append(pressures_frame)\n",
        "\n",
        "    return pd.DataFrame(pressures)\n",
        "\n",
        "#count pressure and add to df\n",
        "pressure_df=calculate_pressure(df)\n",
        "#df = pd.concat([df, pressure_df], axis=1)"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2024-08-26T12:39:34.930075Z",
          "iopub.execute_input": "2024-08-26T12:39:34.931094Z",
          "iopub.status.idle": "2024-08-26T12:42:27.983698Z",
          "shell.execute_reply.started": "2024-08-26T12:39:34.931046Z",
          "shell.execute_reply": "2024-08-26T12:42:27.982421Z"
        },
        "trusted": true,
        "id": "bkvb-EggZunn"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#run this\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "def prepare_time_series_data_with_pressure(df, pressure_df, max_lag=10, tau=1):\n",
        "    X,y=[], []\n",
        "    num_players=df.shape[1]//2\n",
        "\n",
        "\n",
        "    for player_idx in range(num_players):\n",
        "        player_x=df.iloc[:, player_idx*2]\n",
        "        player_y=df.iloc[:, player_idx*2 + 1]\n",
        "        pressure=pressure_df.iloc[:, player_idx]\n",
        "\n",
        "\n",
        "        for t in range(max_lag, len(df) - tau):\n",
        "            lagged_features=[]\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "            for lag in range(max_lag, 0, -1):\n",
        "                lagged_features.extend([\n",
        "                    player_x[t-lag],\n",
        "                    player_y[t-lag],\n",
        "                    pressure[t-lag]\n",
        "                ])\n",
        "\n",
        "\n",
        "            X.append(lagged_features)\n",
        "            y.append([\n",
        "                player_x[t+tau],\n",
        "                player_y[t+tau],\n",
        "                pressure[t+tau]\n",
        "            ])\n",
        "\n",
        "    #dataframe\n",
        "    X_df = pd.DataFrame(X)\n",
        "    y_df = pd.DataFrame(y, columns=['x_t+tau', 'y_t+tau', 'p_t+tau'])\n",
        "\n",
        "    return X_df, y_df\n",
        "\n",
        "\n",
        "X, y = prepare_time_series_data_with_pressure(df, pressure_df, max_lag=10, tau=1)\n",
        "\n",
        "print(X.shape)  #(n_samples, n_features)\n",
        "print(y.shape)  #(n_samples, 3)"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2024-08-26T12:43:59.759457Z",
          "iopub.execute_input": "2024-08-26T12:43:59.760240Z",
          "iopub.status.idle": "2024-08-26T12:46:29.694002Z",
          "shell.execute_reply.started": "2024-08-26T12:43:59.760197Z",
          "shell.execute_reply": "2024-08-26T12:46:29.692085Z"
        },
        "trusted": true,
        "id": "o1_FQNDxZunn",
        "outputId": "3ad3eb3e-830b-497d-cc06-b0562a1e6b6d"
      },
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "text": "(1242276, 30)\n(1242276, 3)\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "eCj2AKo9Zuno"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import mean_squared_error\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "\n",
        "model = RandomForestRegressor(n_estimators=100, random_state=42)\n",
        "model.fit(X_train, y_train)\n",
        "\n",
        "\n",
        "y_pred = model.predict(X_test)\n",
        "\n",
        "\n",
        "mse = mean_squared_error(y_test, y_pred)\n",
        "print(f\"Mean Squared Error: {mse}\")"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2024-08-26T14:38:16.825610Z",
          "iopub.status.idle": "2024-08-26T14:38:16.826252Z",
          "shell.execute_reply.started": "2024-08-26T14:38:16.825909Z",
          "shell.execute_reply": "2024-08-26T14:38:16.825955Z"
        },
        "trusted": true,
        "id": "xEHkrf1FZuno"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "mse"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2024-08-26T14:40:07.554280Z",
          "iopub.execute_input": "2024-08-26T14:40:07.554721Z",
          "iopub.status.idle": "2024-08-26T14:40:07.563770Z",
          "shell.execute_reply.started": "2024-08-26T14:40:07.554684Z",
          "shell.execute_reply": "2024-08-26T14:40:07.562639Z"
        },
        "trusted": true,
        "id": "jnyPj3BdZuno",
        "outputId": "374c3981-399f-4f46-f68f-99f42402f32a"
      },
      "execution_count": null,
      "outputs": [
        {
          "execution_count": 23,
          "output_type": "execute_result",
          "data": {
            "text/plain": "10.228286953718774"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2024-08-26T14:40:35.270943Z",
          "iopub.execute_input": "2024-08-26T14:40:35.271397Z",
          "iopub.status.idle": "2024-08-26T14:40:35.279255Z",
          "shell.execute_reply.started": "2024-08-26T14:40:35.271343Z",
          "shell.execute_reply": "2024-08-26T14:40:35.278181Z"
        },
        "trusted": true,
        "id": "zol7UFs3Zuno",
        "outputId": "01ac3908-3f9c-4661-dc0c-c17d12f3bed4"
      },
      "execution_count": null,
      "outputs": [
        {
          "execution_count": 24,
          "output_type": "execute_result",
          "data": {
            "text/plain": "array([[1.87371833e+03, 1.82374167e+03, 1.88433653e-02],\n       [1.29135715e+03, 3.94200923e+02, 3.37551489e-02],\n       [1.36101016e+03, 3.31989365e+02, 2.71198833e-02],\n       ...,\n       [1.12480500e+03, 9.72323000e+02, 3.30598556e-02],\n       [2.70480500e+03, 6.94365000e+02, 2.80486924e-02],\n       [1.65070473e+03, 1.82792175e+03, 2.97935598e-02]])"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "кросс-валидация тау, которую я не успел посчитать"
      ],
      "metadata": {
        "id": "Kjdx5xw9bADo"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import TimeSeriesSplit\n",
        "from sklearn.metrics import mean_squared_error\n",
        "\n",
        "def evaluate_model_for_tau(df, taus=[5, 10, 15]):\n",
        "    results = {}\n",
        "\n",
        "    for tau in taus:\n",
        "        X, y = prepare_time_series_data_with_pressure(df, pressure_df, max_lag=tau)\n",
        "        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "        model = RandomForestRegressor(n_estimators=100, random_state=42)\n",
        "        model.fit(X_train, y_train)\n",
        "        y_pred = model.predict(X_test)\n",
        "\n",
        "        mse = mean_squared_error(y_test, y_pred)\n",
        "        results[tau] = mse\n",
        "\n",
        "    return results\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "tau_results = evaluate_model_for_tau(df, taus=[5, 10, 15])\n",
        "print(tau_results)"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2024-08-26T14:40:38.014871Z",
          "iopub.execute_input": "2024-08-26T14:40:38.015304Z"
        },
        "trusted": true,
        "id": "xfsRvYTGZuno"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "def plot_predictions(y_test, y_pred):\n",
        "    plt.figure(figsize=(14, 7))\n",
        "    plt.plot(y_test, label='Actual')\n",
        "    plt.plot(pd.Series(y_pred), label='Predicted', linestyle='--')\n",
        "    plt.legend()\n",
        "    plt.title('Actual vs Predicted')\n",
        "    plt.xlabel('Sample')\n",
        "    plt.ylabel('Value')\n",
        "    plt.show()\n",
        "plot_predictions(y_test.values, y_pred)"
      ],
      "metadata": {
        "id": "XgEloAJwbUku"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
